START => [PROG]
START => [REPTPROG0]
START => [STRUCTORIMPLORFUNC, REPTPROG0]
START => [FUNCDEF, REPTPROG0]
START => [FUNCHEAD, FUNCBODY, REPTPROG0]
START => [func, id, lpar, FPARAMS, rpar, arrow, RETURNTYPE, FUNCBODY, REPTPROG0]
START => [func, id, lpar, id, colon, TYPE, REPTFPARAMS3, REPTFPARAMS4, rpar, arrow, RETURNTYPE, FUNCBODY, REPTPROG0]
START => [func, id, lpar, id, colon, integer, REPTFPARAMS3, REPTFPARAMS4, rpar, arrow, RETURNTYPE, FUNCBODY, REPTPROG0]
START => [func, id, lpar, id, colon, integer, ARRAYSIZE, REPTFPARAMS3, REPTFPARAMS4, rpar, arrow, RETURNTYPE, FUNCBODY, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, ARRAYSIZEALT, REPTFPARAMS3, REPTFPARAMS4, rpar, arrow, RETURNTYPE, FUNCBODY, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, REPTFPARAMS3, REPTFPARAMS4, rpar, arrow, RETURNTYPE, FUNCBODY, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, REPTFPARAMS4, rpar, arrow, RETURNTYPE, FUNCBODY, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, FPARAMSTAIL, REPTFPARAMS4, rpar, arrow, RETURNTYPE, FUNCBODY, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, TYPE, REPTFPARAMSTAIL4, REPTFPARAMS4, rpar, arrow, RETURNTYPE, FUNCBODY, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, REPTFPARAMSTAIL4, REPTFPARAMS4, rpar, arrow, RETURNTYPE, FUNCBODY, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, REPTFPARAMS4, rpar, arrow, RETURNTYPE, FUNCBODY, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, RETURNTYPE, FUNCBODY, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, FUNCBODY, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, VARDECLORSTAT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, VARDECL, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, TYPE, REPTVARDECL4, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, REPTVARDECL4, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, VARDECLORSTAT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, VARDECL, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, TYPE, REPTVARDECL4, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, REPTVARDECL4, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, VARDECLORSTAT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, VARDECL, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, TYPE, REPTVARDECL4, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, REPTVARDECL4, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, VARDECLORSTAT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, VARDECL, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, TYPE, REPTVARDECL4, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, REPTVARDECL4, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, VARDECLORSTAT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, STATEMENT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, STATEMENTALT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, ASSIGNOP, EXPR, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, EXPR, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, ARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, TERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, FACTORALT, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, VARDECLORSTAT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, STATEMENT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, STATEMENTALT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, ASSIGNOP, EXPR, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, EXPR, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, ARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, TERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, VARDECLORSTAT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, STATEMENT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, STATEMENTALT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, ASSIGNOP, EXPR, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, EXPR, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, ARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, TERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, VARDECLORSTAT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, STATEMENT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, STATEMENTALT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, ASSIGNOP, EXPR, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, EXPR, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, ARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, TERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, VARDECLORSTAT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, STATEMENT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, RELEXPR, rpar, STATBLOCK, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, ARITHEXPR, RELOP, ARITHEXPR, rpar, STATBLOCK, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, TERM, RIGHTRECARITHEXPR, RELOP, ARITHEXPR, rpar, STATBLOCK, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, RELOP, ARITHEXPR, rpar, STATBLOCK, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, FACTORALT, RIGHTRECTERM, RIGHTRECARITHEXPR, RELOP, ARITHEXPR, rpar, STATBLOCK, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, RELOP, ARITHEXPR, rpar, STATBLOCK, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, RELOP, ARITHEXPR, rpar, STATBLOCK, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, RIGHTRECTERM, RIGHTRECARITHEXPR, RELOP, ARITHEXPR, rpar, STATBLOCK, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, RIGHTRECARITHEXPR, RELOP, ARITHEXPR, rpar, STATBLOCK, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, RELOP, ARITHEXPR, rpar, STATBLOCK, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, ARITHEXPR, rpar, STATBLOCK, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, TERM, RIGHTRECARITHEXPR, rpar, STATBLOCK, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, rpar, STATBLOCK, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, FACTORALT, RIGHTRECTERM, RIGHTRECARITHEXPR, rpar, STATBLOCK, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, rpar, STATBLOCK, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, rpar, STATBLOCK, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, RIGHTRECTERM, RIGHTRECARITHEXPR, rpar, STATBLOCK, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, RIGHTRECARITHEXPR, rpar, STATBLOCK, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, ADDOP, TERM, RIGHTRECARITHEXPR, rpar, STATBLOCK, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, TERM, RIGHTRECARITHEXPR, rpar, STATBLOCK, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, rpar, STATBLOCK, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, RIGHTRECTERM, RIGHTRECARITHEXPR, rpar, STATBLOCK, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, RIGHTRECARITHEXPR, rpar, STATBLOCK, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, STATBLOCK, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, STATEMENT, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, RELEXPR, rpar, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, ARITHEXPR, RELOP, ARITHEXPR, rpar, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, TERM, RIGHTRECARITHEXPR, RELOP, ARITHEXPR, rpar, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, RELOP, ARITHEXPR, rpar, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, FACTORALT, RIGHTRECTERM, RIGHTRECARITHEXPR, RELOP, ARITHEXPR, rpar, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, RELOP, ARITHEXPR, rpar, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, RELOP, ARITHEXPR, rpar, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, RIGHTRECTERM, RIGHTRECARITHEXPR, RELOP, ARITHEXPR, rpar, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, RIGHTRECARITHEXPR, RELOP, ARITHEXPR, rpar, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, RELOP, ARITHEXPR, rpar, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, ARITHEXPR, rpar, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, TERM, RIGHTRECARITHEXPR, rpar, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, rpar, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, FACTORALT, RIGHTRECTERM, RIGHTRECARITHEXPR, rpar, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, rpar, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, rpar, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, RIGHTRECTERM, RIGHTRECARITHEXPR, rpar, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, RIGHTRECARITHEXPR, rpar, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, ADDOP, TERM, RIGHTRECARITHEXPR, rpar, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, TERM, RIGHTRECARITHEXPR, rpar, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, rpar, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, FACTORALT, RIGHTRECTERM, RIGHTRECARITHEXPR, rpar, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, rpar, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, rpar, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, RIGHTRECTERM, RIGHTRECARITHEXPR, rpar, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, RIGHTRECARITHEXPR, rpar, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, ADDOP, TERM, RIGHTRECARITHEXPR, rpar, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, TERM, RIGHTRECARITHEXPR, rpar, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, rpar, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, RIGHTRECTERM, RIGHTRECARITHEXPR, rpar, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, RIGHTRECARITHEXPR, rpar, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, STATEMENT, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, RELEXPR, rpar, then, STATBLOCK, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, ARITHEXPR, RELOP, ARITHEXPR, rpar, then, STATBLOCK, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, TERM, RIGHTRECARITHEXPR, RELOP, ARITHEXPR, rpar, then, STATBLOCK, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, RELOP, ARITHEXPR, rpar, then, STATBLOCK, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, FACTORALT, RIGHTRECTERM, RIGHTRECARITHEXPR, RELOP, ARITHEXPR, rpar, then, STATBLOCK, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, RELOP, ARITHEXPR, rpar, then, STATBLOCK, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, INDICE, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, RELOP, ARITHEXPR, rpar, then, STATBLOCK, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, ARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, RELOP, ARITHEXPR, rpar, then, STATBLOCK, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, TERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, RELOP, ARITHEXPR, rpar, then, STATBLOCK, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, RELOP, ARITHEXPR, rpar, then, STATBLOCK, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, FACTORALT, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, RELOP, ARITHEXPR, rpar, then, STATBLOCK, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, RELOP, ARITHEXPR, rpar, then, STATBLOCK, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, RELOP, ARITHEXPR, rpar, then, STATBLOCK, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, RELOP, ARITHEXPR, rpar, then, STATBLOCK, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, RELOP, ARITHEXPR, rpar, then, STATBLOCK, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, RELOP, ARITHEXPR, rpar, then, STATBLOCK, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, RELOP, ARITHEXPR, rpar, then, STATBLOCK, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, RIGHTRECTERM, RIGHTRECARITHEXPR, RELOP, ARITHEXPR, rpar, then, STATBLOCK, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, RIGHTRECARITHEXPR, RELOP, ARITHEXPR, rpar, then, STATBLOCK, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, RELOP, ARITHEXPR, rpar, then, STATBLOCK, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, ARITHEXPR, rpar, then, STATBLOCK, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, TERM, RIGHTRECARITHEXPR, rpar, then, STATBLOCK, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, rpar, then, STATBLOCK, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, FACTORALT, RIGHTRECTERM, RIGHTRECARITHEXPR, rpar, then, STATBLOCK, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, rpar, then, STATBLOCK, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, INDICE, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, rpar, then, STATBLOCK, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, ARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, rpar, then, STATBLOCK, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, TERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, rpar, then, STATBLOCK, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, rpar, then, STATBLOCK, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, FACTORALT, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, rpar, then, STATBLOCK, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, rpar, then, STATBLOCK, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, rpar, then, STATBLOCK, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, rpar, then, STATBLOCK, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, rpar, then, STATBLOCK, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, ADDOP, TERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, rpar, then, STATBLOCK, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, TERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, rpar, then, STATBLOCK, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, rpar, then, STATBLOCK, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, rpar, then, STATBLOCK, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, rpar, then, STATBLOCK, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, rpar, then, STATBLOCK, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, rpar, then, STATBLOCK, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, RIGHTRECTERM, RIGHTRECARITHEXPR, rpar, then, STATBLOCK, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, RIGHTRECARITHEXPR, rpar, then, STATBLOCK, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, STATBLOCK, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, STATEMENT, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, STATEMENTALT, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, REPTINDICES, STATEMENTALT2, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, STATEMENTALT2, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, ASSIGNOP, EXPR, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, EXPR, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, ARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, TERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, FACTORALT, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, INDICE, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, ARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, TERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, FACTORALT, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, STATEMENT, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, STATEMENTALT, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, REPTINDICES, STATEMENTALT2, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, INDICE, REPTINDICES, STATEMENTALT2, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, ARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, TERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, FACTORALT, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, REPTINDICES, STATEMENTALT2, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, STATEMENTALT2, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, ASSIGNOP, EXPR, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, EXPR, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, ARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, TERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, FACTORALT, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, INDICE, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, ARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, TERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, FACTORALT, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, ADDOP, TERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, TERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, STATEMENT, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, STATEMENTALT, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, REPTINDICES, STATEMENTALT2, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, INDICE, REPTINDICES, STATEMENTALT2, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, ARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, TERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, FACTORALT, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, ADDOP, TERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, TERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, REPTINDICES, STATEMENTALT2, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, STATEMENTALT2, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, ASSIGNOP, EXPR, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, EXPR, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, ARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, TERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, FACTORALT, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, REPTSTATBLOCK1, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, STATBLOCK, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, STATEMENT, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, STATEMENTALT, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, REPTINDICES, STATEMENTALT2, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, STATEMENTALT2, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, ASSIGNOP, EXPR, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, EXPR, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, ARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, TERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, FACTORALT, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, ADDOP, TERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, TERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, REPTSTATBLOCK1, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, STATEMENT, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, STATEMENTALT, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, REPTINDICES, STATEMENTALT2, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, STATEMENTALT2, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, ASSIGNOP, EXPR, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, EXPR, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, ARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, TERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, FACTORALT, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, ADDOP, TERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, TERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, STRUCTORIMPLORFUNC, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, FUNCDEF, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, FUNCHEAD, FUNCBODY, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, FPARAMS, rpar, arrow, RETURNTYPE, FUNCBODY, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, TYPE, REPTFPARAMS3, REPTFPARAMS4, rpar, arrow, RETURNTYPE, FUNCBODY, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, REPTFPARAMS3, REPTFPARAMS4, rpar, arrow, RETURNTYPE, FUNCBODY, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, ARRAYSIZE, REPTFPARAMS3, REPTFPARAMS4, rpar, arrow, RETURNTYPE, FUNCBODY, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, ARRAYSIZEALT, REPTFPARAMS3, REPTFPARAMS4, rpar, arrow, RETURNTYPE, FUNCBODY, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, REPTFPARAMS3, REPTFPARAMS4, rpar, arrow, RETURNTYPE, FUNCBODY, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, REPTFPARAMS4, rpar, arrow, RETURNTYPE, FUNCBODY, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, FPARAMSTAIL, REPTFPARAMS4, rpar, arrow, RETURNTYPE, FUNCBODY, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, TYPE, REPTFPARAMSTAIL4, REPTFPARAMS4, rpar, arrow, RETURNTYPE, FUNCBODY, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, REPTFPARAMSTAIL4, REPTFPARAMS4, rpar, arrow, RETURNTYPE, FUNCBODY, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, REPTFPARAMS4, rpar, arrow, RETURNTYPE, FUNCBODY, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, RETURNTYPE, FUNCBODY, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, FUNCBODY, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, VARDECLORSTAT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, VARDECL, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, TYPE, REPTVARDECL4, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, REPTVARDECL4, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, VARDECLORSTAT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, VARDECL, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, TYPE, REPTVARDECL4, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, REPTVARDECL4, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, VARDECLORSTAT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, STATEMENT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, STATEMENTALT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, ASSIGNOP, EXPR, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, EXPR, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, ARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, TERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, FACTORALT, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, VARDECLORSTAT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, STATEMENT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, STATEMENTALT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, ASSIGNOP, EXPR, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, EXPR, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, ARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, TERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, VARDECLORSTAT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, STATEMENT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, RELEXPR, rpar, STATBLOCK, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, ARITHEXPR, RELOP, ARITHEXPR, rpar, STATBLOCK, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, TERM, RIGHTRECARITHEXPR, RELOP, ARITHEXPR, rpar, STATBLOCK, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, RELOP, ARITHEXPR, rpar, STATBLOCK, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, FACTORALT, RIGHTRECTERM, RIGHTRECARITHEXPR, RELOP, ARITHEXPR, rpar, STATBLOCK, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, RELOP, ARITHEXPR, rpar, STATBLOCK, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, RELOP, ARITHEXPR, rpar, STATBLOCK, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, RIGHTRECTERM, RIGHTRECARITHEXPR, RELOP, ARITHEXPR, rpar, STATBLOCK, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, RIGHTRECARITHEXPR, RELOP, ARITHEXPR, rpar, STATBLOCK, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, RELOP, ARITHEXPR, rpar, STATBLOCK, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, ARITHEXPR, rpar, STATBLOCK, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, TERM, RIGHTRECARITHEXPR, rpar, STATBLOCK, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, rpar, STATBLOCK, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, FACTORALT, RIGHTRECTERM, RIGHTRECARITHEXPR, rpar, STATBLOCK, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, rpar, STATBLOCK, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, rpar, STATBLOCK, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, RIGHTRECTERM, RIGHTRECARITHEXPR, rpar, STATBLOCK, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, RIGHTRECARITHEXPR, rpar, STATBLOCK, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, STATBLOCK, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, STATEMENT, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, EXPR, rpar, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, ARITHEXPR, EXPRALT, rpar, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, TERM, RIGHTRECARITHEXPR, EXPRALT, rpar, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, rpar, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, FACTORALT, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, rpar, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, rpar, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, INDICE, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, rpar, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, ARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, rpar, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, TERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, rpar, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, rpar, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, FACTORALT, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, rpar, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, rpar, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, rpar, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, rpar, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, rpar, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, rpar, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, rpar, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, rpar, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, RIGHTRECARITHEXPR, EXPRALT, rpar, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, EXPRALT, rpar, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, STATEMENT, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, STATEMENTALT, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, REPTINDICES, STATEMENTALT2, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, STATEMENTALT2, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, ASSIGNOP, EXPR, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, EXPR, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, ARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, TERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, FACTORALT, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, ADDOP, TERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, TERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, RIGHTRECARITHEXPR, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, EXPRALT, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, REPTSTATBLOCK1, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, STRUCTORIMPLORFUNC, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, FUNCDEF, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, FUNCHEAD, FUNCBODY, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, FPARAMS, rpar, arrow, RETURNTYPE, FUNCBODY, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, RETURNTYPE, FUNCBODY, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, FUNCBODY, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, VARDECLORSTAT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, VARDECL, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, TYPE, REPTVARDECL4, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, REPTVARDECL4, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, ARRAYSIZE, REPTVARDECL4, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, ARRAYSIZEALT, REPTVARDECL4, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, REPTVARDECL4, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, VARDECLORSTAT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, STATEMENT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, STATEMENTALT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, INDICE, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, ARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, TERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, ASSIGNOP, EXPR, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, EXPR, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, ARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, TERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, VARDECLORSTAT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, STATEMENT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, STATEMENTALT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, INDICE, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, ARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, TERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, ASSIGNOP, EXPR, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, EXPR, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, ARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, TERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, VARDECLORSTAT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, STATEMENT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, STATEMENTALT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, INDICE, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, ARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, TERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, ASSIGNOP, EXPR, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, EXPR, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, ARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, TERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, VARDECLORSTAT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, STATEMENT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, STATEMENTALT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, INDICE, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, ARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, TERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, ASSIGNOP, EXPR, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, EXPR, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, ARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, TERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, VARDECLORSTAT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, STATEMENT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, STATEMENTALT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, INDICE, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, ARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, TERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, ASSIGNOP, EXPR, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, EXPR, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, ARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, TERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, VARDECLORSTAT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, STATEMENT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, STATEMENTALT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, INDICE, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, ARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, TERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, ASSIGNOP, EXPR, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, EXPR, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, ARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, TERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, VARDECLORSTAT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, STATEMENT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, STATEMENTALT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, INDICE, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, ARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, TERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, RIGHTRECTERM, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, RIGHTRECARITHEXPR, rsqbr, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, REPTINDICES, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, STATEMENTALT2, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, ASSIGNOP, EXPR, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, EXPR, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, ARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, TERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, RIGHTRECARITHEXPR, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, EXPRALT, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, VARDECLORSTAT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, STATEMENT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, STATEMENTALT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, APARAMS, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, EXPR, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, ARITHEXPR, EXPRALT, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, TERM, RIGHTRECARITHEXPR, EXPRALT, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, FACTORALT, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, RIGHTRECARITHEXPR, EXPRALT, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, EXPRALT, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, APARAMSTAIL, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, EXPR, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, ARITHEXPR, EXPRALT, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, TERM, RIGHTRECARITHEXPR, EXPRALT, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, RIGHTRECARITHEXPR, EXPRALT, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, EXPRALT, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, VARDECLORSTAT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, STATEMENT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, STATEMENTALT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, APARAMS, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, EXPR, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, ARITHEXPR, EXPRALT, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, TERM, RIGHTRECARITHEXPR, EXPRALT, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, FACTORALT, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, RIGHTRECARITHEXPR, EXPRALT, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, EXPRALT, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, APARAMSTAIL, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, EXPR, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, ARITHEXPR, EXPRALT, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, TERM, RIGHTRECARITHEXPR, EXPRALT, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, intlit, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, intlit, RIGHTRECARITHEXPR, EXPRALT, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, intlit, EXPRALT, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, intlit, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, intlit, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, intlit, rpar, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, intlit, rpar, semi, VARDECLORSTAT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, intlit, rpar, semi, STATEMENT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, intlit, rpar, semi, id, STATEMENTALT, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, APARAMS, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, EXPR, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, ARITHEXPR, EXPRALT, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, TERM, RIGHTRECARITHEXPR, EXPRALT, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, FACTORALT, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, REPTINDICES, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, FACTORALT2, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, RIGHTRECARITHEXPR, EXPRALT, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, EXPRALT, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, APARAMSTAIL, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, EXPR, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, ARITHEXPR, EXPRALT, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, TERM, RIGHTRECARITHEXPR, EXPRALT, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, FACTOR, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, intlit, RIGHTRECTERM, RIGHTRECARITHEXPR, EXPRALT, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, intlit, RIGHTRECARITHEXPR, EXPRALT, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, intlit, EXPRALT, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, intlit, REPTAPARAMSALT, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, intlit, rpar, STATEMENTALT3, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, intlit, rpar, semi, REPTFUNCBODY1, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, intlit, rpar, semi, rcurbr, REPTPROG0]
START => [func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, id, equal, intlit, semi, id, equal, intlit, semi, while, lpar, id, lt, id, minus, intlit, rpar, lcurbr, while, lpar, id, lt, id, minus, id, minus, intlit, rpar, lcurbr, if, lpar, id, lsqbr, id, rsqbr, gt, id, lsqbr, id, plus, intlit, rsqbr, rpar, then, lcurbr, id, equal, id, lsqbr, id, rsqbr, semi, id, lsqbr, id, rsqbr, equal, id, lsqbr, id, plus, intlit, rsqbr, semi, id, lsqbr, id, plus, intlit, rsqbr, equal, id, semi, rcurbr, else, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, id, colon, integer, lsqbr, rsqbr, comma, id, colon, integer, rpar, arrow, void, lcurbr, let, id, colon, integer, semi, let, id, colon, integer, semi, id, equal, id, semi, id, equal, intlit, semi, while, lpar, id, lt, id, rpar, lcurbr, write, lpar, id, lsqbr, id, rsqbr, rpar, semi, id, equal, id, plus, intlit, semi, rcurbr, semi, rcurbr, func, id, lpar, rpar, arrow, void, lcurbr, let, id, colon, integer, lsqbr, intlit, rsqbr, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lsqbr, intlit, rsqbr, equal, intlit, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, intlit, rpar, semi, id, lpar, id, comma, intlit, rpar, semi, rcurbr]
